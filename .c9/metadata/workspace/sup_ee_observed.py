{"changed":true,"filter":false,"title":"sup_ee_observed.py","tooltip":"/sup_ee_observed.py","value":"#-------------------------------------------------\r\n#FIFTH - look for evidence of exploration-exploitation\r\n#        trade off \r\n#-------------------------------------------------\r\n\r\n#import modules\r\nimport json\r\nimport pickle\r\nimport scipy.stats.mstats as ssm\r\nimport numpy as np\r\nimport random\r\nimport datetime\r\nimport bisect\r\nfrom pylab import *\r\nfrom scipy.stats.stats import pearsonr\r\n\r\n# ------------------------------------------------\r\n# import data from json\r\nprint \"loading data\"\r\nfh=open('data_by_cookie.json')\r\ndata=json.load(fh)\r\n\r\n\r\n# --------------------------------------------\r\n# look at subsample of people who played more than x times   \r\nprint \"organising data\"\r\nbig = {k: data[k] for k in data if len(data[k]) > 9} #pythonic\r\n\r\n\r\n# --------------------------------------------\r\n#calc dict of maximum score for each player(=each key)\r\nmaxscore={}\r\n    \r\nfor key in big:\r\n    maxscore[key]= max([big[key][attempt][0] for attempt in big[key]])\r\n\r\n# sort maximum scores, smallest to biggest\r\nranked_maxscore=sorted(maxscore[key] for key in maxscore)\r\n\r\n#calc percentile ranking for each player (=each key)\r\nprcentiles=[]\r\nfor p in range(100):\r\n    prcentiles.append(ssm.scoreatpercentile(ranked_maxscore,p))\r\n\r\n\r\n#decile={}\r\n#    \r\n#for key in big:\r\n#    for i in prcentiles:\r\n#        if maxscore[key]>i:\r\n#            decile[key]=prcentiles.index(float(i))\r\n\r\n#so now we know how good each player is\r\n\r\n#now let's calc variance\r\n\r\nav1={}\r\nvar1={}\r\nav2={}\r\nvar2={}\r\n\r\nfirst_plays = ['%.5d'%(i+1) for i in range(5)]\r\nsecond_plays = ['%.5d'%(i+6) for i in range(5)]\r\n\r\n#construct vaiables dicts\r\n\r\nprint \"calculating summary stats\"\r\n#for each player make two lists, of plays 1-5 (first) and 6-10 (second)\r\n#and calculate summary stats av1,var1 and av2, var2\r\nfor key in big:\r\n    first=[]\r\n    for attempt in first_plays:\r\n        try:\r\n            first.append(big[key][attempt][0])\r\n        except KeyError:\r\n            continue\r\n    av1[key]=mean(first)\r\n    var1[key]=var(first)\r\n    second=[]\r\n    for attempt in second_plays:\r\n        try:\r\n            second.append(big[key][attempt][0])\r\n        except KeyError:\r\n            continue       \r\n    av2[key]=mean(second) \r\n    var2[key]=var(second)\r\n\r\n\r\n#make list of summary stats\r\nx=[]\r\ny=[]\r\nfor key in big:\r\n    x.append(var2[key])\r\n    y.append(av1[key])\r\n\r\n\u0001#find percentile values\r\nprcentiles_x=[]\r\nfor p in range(100):\r\n    prcentiles_x.append(ssm.scoreatpercentile(x,p))\r\n\r\nprcentiles_y=[]\r\nfor p in range(100):\r\n    prcentiles_y.append(ssm.scoreatpercentile(y,p))\r\n\r\n\r\n#make dict of prcentile values for each statistic for each player\r\nprcentile_xindex={key: bisect.bisect(prcentiles_x,var2[key]) for key in big}\r\nprcentile_yindex={key: bisect.bisect(prcentiles_y,av1[key]) for key in big}\r\n       \r\nprint \"saving data\"        \r\n\r\n#convert to list\r\nxlist=[]\r\nylist=[]\r\nfor key in prcentile_xindex:\r\n    xlist.append(prcentile_xindex[key])\r\n    ylist.append(prcentile_yindex[key])\r\n\r\npickle.dump(xlist, open('save_a5_xlist.p', 'wb'))\r\npickle.dump(ylist, open('save_a5_ylist.p', 'wb'))\r\n       \r\n       \r\n","undoManager":{"mark":-1,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":95,"column":0},"end":{"row":95,"column":1}},"text":"\u0001"}]}]]},"ace":{"folds":[],"scrolltop":840,"scrollleft":0,"selection":{"start":{"row":95,"column":1},"end":{"row":95,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":69,"state":"start","mode":"ace/mode/python"}},"timestamp":1407496134049}